{"version":3,"sources":["Components/PersonList.js","Components/PersonAdd.js","Components/PersonUpdate.js","Components/PersonCrud.js","App.js","serviceWorker.js","index.js"],"names":["PersonList","props","className","scope","list","map","user","index","key","id","name","lastname","onClick","userSelected","deleteUser","PersonAdd","useForm","register","errors","handleSubmit","onSubmit","data","e","preventDefault","addUser","target","reset","placeholder","ref","required","value","message","maxLength","minLength","type","PersonUpdate","updateUser","defaultValue","PersonCrud","u","useState","setUser","users","setUsers","action","setAction","shortid","generate","console","log","filter","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bbf91adc.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nconst PersonList = (props) => {\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <table className=\"table table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">LastName</th>\r\n                        <th scope=\"col\">--</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.list.map((user, index) =>\r\n\r\n                        <tr key={user.id} >\r\n                            <th scope=\"row\">{user.id}</th>\r\n                            <td>{user.name}</td>\r\n                            <td>{user.lastname}</td>\r\n                            <td>\r\n                                <button \r\n                                    className=\"btn btn-sm btn-primary\"\r\n                                    onClick={()=>{ props.userSelected(user)}}>\r\n                                    Edit\r\n                                </button>\r\n                                <button\r\n                                    className=\"btn btn-sm btn-danger\"\r\n                                    onClick={() => { props.deleteUser(user.id) }}>\r\n                                    Delete\r\n                                </button>\r\n                            </td>\r\n                        </tr>)}\r\n\r\n                </tbody>\r\n            </table>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default PersonList;","import React, { Fragment } from 'react';\r\nimport { useForm } from 'react-hook-form' //mediante npm install react-hook-form\r\n\r\nconst PersonAdd = (props) => {\r\n\r\n    const { register, errors, handleSubmit } = useForm();\r\n\r\n    const onSubmit = (data, e) => {\r\n        e.preventDefault()\r\n        props.addUser(data)\r\n        e.target.reset()\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        placeholder=\"Nombre de Usuario\"\r\n                        className=\"form-control\"\r\n                        name=\"name\"\r\n                        ref={register({\r\n                            required: {\r\n                                value: true,\r\n                                message: 'Nombre es requerido'\r\n                            },\r\n                            maxLength: {\r\n                                value: 10,\r\n                                message: 'No más de 5 carácteres!'\r\n                            },\r\n                            minLength: {\r\n                                value: 4,\r\n                                message: 'Mínimo 2 carácteres'\r\n                            }\r\n                        })}\r\n                    ></input>\r\n                    <span className=\"text-danger text-small d-block mb-2\">\r\n                        {errors?.name?.message}\r\n                    </span>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        placeholder=\"Apellido\"\r\n                        className=\"form-control\"\r\n                        name=\"lastname\"\r\n                        ref={register({\r\n                            required: {\r\n                                value: true,\r\n                                message: 'Apellido es requerido'\r\n                            },\r\n                            maxLength: {\r\n                                value: 10,\r\n                                message: 'No más de 5 carácteres!'\r\n                            },\r\n                            minLength: {\r\n                                value: 4,\r\n                                message: 'Mínimo 2 carácteres'\r\n                            }\r\n                        })}\r\n                    ></input>\r\n                    <span className=\"text-danger text-small d-block mb-2\">\r\n                        {errors?.lastname?.message}\r\n                    </span>\r\n                </div>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-success\">\r\n                    Add +\r\n                                    </button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default PersonAdd;","import React, { Fragment } from 'react';\r\nimport { useForm } from 'react-hook-form'\r\n\r\nconst PersonUpdate = (props) => {\r\n    const { register, errors, handleSubmit } = useForm();\r\n\r\n    const onSubmit = (data, e) => {\r\n        e.preventDefault()\r\n        data.id = props.user.id\r\n        props.updateUser(data)\r\n        e.target.reset()\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        placeholder=\"Ingrese nombre de usuario\"\r\n                        className=\"form-control\"\r\n                        name=\"name\"\r\n                        defaultValue={props.user.name}\r\n                        ref={register({\r\n                            required: {\r\n                                value: true,\r\n                                message: 'Nombre es requerido'\r\n                            },\r\n                            maxLength: {\r\n                                value: 10,\r\n                                message: 'No más de 5 carácteres!'\r\n                            },\r\n                            minLength: {\r\n                                value: 4,\r\n                                message: 'Mínimo 2 carácteres'\r\n                            }\r\n                        })}\r\n                    ></input>\r\n                    <span className=\"text-danger text-small d-block mb-2\">\r\n                        {errors?.name?.message}\r\n                    </span>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        placeholder=\"Ingrese apellido de usuario\"\r\n                        className=\"form-control\"\r\n                        name=\"lastname\"\r\n                        defaultValue={props.user.lastname}\r\n                        ref={register({\r\n                            required: {\r\n                                value: true,\r\n                                message: 'Apellido es requerido'\r\n                            },\r\n                            maxLength: {\r\n                                value: 10,\r\n                                message: 'No más de 5 carácteres!'\r\n                            },\r\n                            minLength: {\r\n                                value: 4,\r\n                                message: 'Mínimo 2 carácteres'\r\n                            }\r\n                        })}\r\n                    ></input>\r\n                    <span className=\"text-danger text-small d-block mb-2\">\r\n                        {errors?.lastname?.message}\r\n                    </span>\r\n                </div>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-success\">\r\n                    Update\r\n                                    </button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n \r\nexport default PersonUpdate;","import React, { useState, Fragment } from 'react';\r\n// el Fragment se utiliza para envolver todo lo que se renderiza en cada componente/funcion\r\n//se usa para evitar que hayan tantos div que no tienen otra funcion que encapsular todo el render/return\r\nimport PersonList from './PersonList';\r\nimport PersonAdd from './PersonAdd';\r\nimport shortid from 'shortid' //npm install shortid\r\nimport PersonUpdate from './PersonUpdate';\r\n\r\nexport default function PersonCrud() {\r\n    const u = {\r\n        id: '', \r\n        name: '', \r\n        lastname: ''\r\n    }\r\n    const [user, setUser] = useState(u)\r\n    const [users, setUsers] = useState([])\r\n    const [action, setAction] = useState('add')\r\n\r\n    //agrega un usuario a \r\n    const addU = (data) => {\r\n        data.id = shortid.generate()\r\n        console.log(data)\r\n        setUsers([\r\n            ...users, // con los ... estamos haciendo una copia del array que teníamos antes, gracias a eso\r\n            //evitamos que se limpie el array en cada setUsers (estamos concatenando)\r\n            data\r\n        ])\r\n    }\r\n\r\n    //elimina un usuario \r\n    const deleteU = (id) => {\r\n        setUsers(users.filter(user => user.id !== id))\r\n    }\r\n\r\n    //edita un usuario \r\n    const updateU = (data) => {\r\n        console.log(data)\r\n        setUsers(users.map((user, index)=> (user.id === data.id ? users[index] = data : user)))\r\n        setAction('add')\r\n        setUser(u)\r\n    }\r\n    //recibe el usuario a actualizar\r\n    const userSelected = (data) =>{\r\n        console.log(data)\r\n        setAction('update')\r\n        setUser(data)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"container\" >\r\n                <div className=\"row justify-content-center mt\">\r\n                    <div className=\"col-md-10 crud\">\r\n                        <h2 className=\"title\">CRUD USERS</h2>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4\">\r\n                                {action === 'add' ?\r\n                                    <PersonAdd\r\n                                        addUser={addU}\r\n                                    ></PersonAdd> :\r\n                                    <PersonUpdate\r\n                                        user={user}\r\n                                        updateUser={updateU}>\r\n                                    </PersonUpdate>}\r\n                            </div>\r\n                            <div className=\"col-md-8\">\r\n                                <PersonList\r\n                                    list={users}\r\n                                    deleteUser={deleteU}\r\n                                    userSelected={userSelected}\r\n                                ></PersonList>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </Fragment>\r\n    )\r\n}","import React from 'react';\nimport { Switch, Route } from \"react-router-dom\";\nimport PersonCrud from \"./Components/PersonCrud\"\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/' component={PersonCrud} /> \n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//maneja el enrutado como un SPA single page aplication\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}